
# testBinance.py
# 从Binance币安在线api下载1分钟k线，进行回测
import os.path  # 路径管理
import sys  # 获取当前运行脚本的路径 (in argv[0])
import requests 
import backtrader as bt
import backtrader.analyzers as btanalyzers
import json 
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt
import quantstats

 
class MaCrossStrategy(bt.Strategy):

    params=(('p1',12),('p2',26),('p3',9),)
    def __init__(self):
        self.order = None
        #计算MACD
        self.ema_1 = bt.indicators.ExponentialMovingAverage(self.datas[0].close,period=self.p.p1)
        self.ema_2 = bt.indicators.ExponentialMovingAverage(self.datas[0].close,period=self.p.p2)
        self.dif = self.ema_1 - self.ema_2
        self.dea = bt.indicators.ExponentialMovingAverage(self.dif,period=self.p.p3)
        self.macd = (self.dif -self.dea)*2



    def log(self, txt, dt=None):
        # 记录策略的执行日志
        dt = dt or self.datas[0].datetime.date(0)
        print('%s, %s' % (dt.isoformat(), txt))
    # 订单状态通知，买入卖出都是下单
    def notify_order(self, order):
        if order.status in [order.Submitted, order.Accepted]:
            # broker 提交/接受了，买/卖订单则什么都不做
            return
        # 检查一个订单是否完成
        # 注意: 当资金不足时，broker会拒绝订单
        if order.status in [order.Completed]:
            if order.isbuy():
                self.log(
                    '已买入, 价格: %.2f, 费用: %.2f, 佣金 %.2f' %
                    (order.executed.price,
                     order.executed.value,
                     order.executed.comm))

                self.buyprice = order.executed.price
                self.buycomm = order.executed.comm
            elif order.issell():
                self.log('已卖出, 价格: %.2f, 费用: %.2f, 佣金 %.2f' %
                         (order.executed.price,
                          order.executed.value,
                          order.executed.comm))
            # 记录当前交易数量
            self.bar_executed = len(self)

        elif order.status in [order.Canceled, order.Margin, order.Rejected]:
            self.log('订单取消/保证金不足/拒绝')

        # 其他状态记录为：无挂起订单
        self.order = None

    # 交易状态通知，一买一卖算交易
    def notify_trade(self, trade):
        if not trade.isclosed:
            return
        self.log('交易利润, 毛利润 %.2f, 净利润 %.2f' %
                 (trade.pnl, trade.pnlcomm))


    def next(self):
        size = self.getposition(data = data).size
        if not self.position:
            # 得到当前的账户价值
            total_value = self.broker.getvalue()
            #1手=100股，满仓买入
            ss=int((total_value/100)/self.datas[0].close[0])*100
            # ss=int((total_value*1)/self.datas[0].close[0])

            #当MACD柱大于0（红柱）且无持仓时满仓买入
            if self.dif > 0:
                self.order=self.buy(size=ss)
            # if self.macdhist <0:
            #     self.order=self.sell(size=ss)
        else:
            #当MACD柱小于0（绿柱）且持仓时全部清仓
            if self.dif < 0:
                if size >0:
                    self.close()


            # if self.macdhist >0 :
            #     if size <0:
            #         self.close()
# 测略结束时，多用于参数调优
    # def stop(self):
    #     self.log('(MACD %2d)期末资金 %.2f' %
    #              (self.p.p1, self.broker.getvalue())) #, doprint=True


# 获取当前运行脚本所在目录
modpath = os.path.dirname(os.path.abspath(sys.argv[0]))
# 拼接加载路径
datapath = os.path.join(modpath, './EOS/4h.csv')
# Create a Data Feed
data = bt.feeds.GenericCSVData(
    dataname=datapath,
    # Do not pass values before this date
    dtformat = ('%Y-%m-%d %H:%M:%S'),
    datetime = 11,
    high = 2,
    low = 3,
    open=1,
    close=4,
    volume=5,
    openinterest=-1,
    timeframe = bt.TimeFrame.Minutes,
    compression=5,
)


cerebro = bt.Cerebro()
# cerebro = bt.Cerebro(stdstats=False)   # Broker、Trades、BuySell 3个观测器，默认是自动添加给 cerebro 的
cerebro.adddata(data)
 
cerebro.addstrategy(MaCrossStrategy)
cerebro.broker.setcash(1000000.0)
start_portfolio_value = cerebro.broker.getvalue()
# 引擎运行前打印期出资金
print('组合期初资金: %.2f' % start_portfolio_value)
# 设置佣金为0.001,除以100去掉%号
cerebro.broker.setcommission(commission=0.0005)
cerebro.addsizer(bt.sizers.PercentSizer, percents = 50)

cerebro.addobserver(bt.observers.DrawDown)
cerebro.addobserver(bt.observers.TimeReturn)
# 添加分析指标
# # 交易次数
# cerebro.addanalyzer(btanalyzers.Transactions, _name = "trans")
# # 返回年初至年末的年度收益率
# cerebro.addanalyzer(bt.analyzers.AnnualReturn, _name='_AnnualReturn')
# # 计算最大回撤相关指标
# cerebro.addanalyzer(bt.analyzers.DrawDown, _name='_DrawDown')
# # 计算年化收益：日度收益
# cerebro.addanalyzer(bt.analyzers.Returns, _name='_Returns', tann=252)
# # 计算年化夏普比率：日度收益
# cerebro.addanalyzer(bt.analyzers.SharpeRatio, _name='_SharpeRatio', timeframe=bt.TimeFrame.Days, annualize=True, riskfreerate=0) # 计算夏普比率
# cerebro.addanalyzer(bt.analyzers.SharpeRatio_A, _name='_SharpeRatio_A')
# # 返回收益率时序
# cerebro.addanalyzer(bt.analyzers.TimeReturn, _name='_TimeReturn')

# Add analyzers
cerebro.addanalyzer(bt.analyzers.PyFolio, _name='PyFolio')

back = cerebro.run()
strat = back[0]
end_portfolio_value = cerebro.broker.getvalue()
pnl = end_portfolio_value - start_portfolio_value

print(f'Starting Portfolio Value: {start_portfolio_value:2f}')
print(f'Final Portfolio Value: {end_portfolio_value:2f}')
print(f'PnL: {pnl:.2f}')

portfolio_stats = strat.analyzers.getbyname('PyFolio')
back, positions, transactions, gross_lev = portfolio_stats.get_pf_items()
back.index = back.index.tz_convert(None)

quantstats.reports.html(back, output='stats.html', title='ETH Sentiment')


# print('最终市值', cerebro.broker.getvalue()) # Ending balance
# print('交易次数',len(back[0].analyzers.trans.get_analysis())) # Number of Trades
# print("--------------- AnnualReturn -----------------")
# print(back[0].analyzers._AnnualReturn.get_analysis())
# print("--------------- DrawDown 回撤-----------------")
# print(back[0].analyzers._DrawDown.get_analysis())
# print("--------------- Returns -----------------")
# print(back[0].analyzers._Returns.get_analysis())
# print("--------------- SharpeRatio -----------------")
# print(back[0].analyzers._SharpeRatio.get_analysis())
# print("--------------- SharpeRatio_A -----------------")
# print(back[0].analyzers._SharpeRatio_A.get_analysis())

quantstats.reports.html(back, output='stats.html', title='Stock Sentiment')
# 绘制图像
# cerebro.plot()
